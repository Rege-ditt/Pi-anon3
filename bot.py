import logging
import os
import threading
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes, ConversationHandler
from flask import Flask

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω —Ç–∞ ID
TOKEN = "7903591351:AAH9zNPCwh4eTXMuMWQa1T0EwV5xgemwjds"
ADMIN_ID = 6085114476

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
AWAITING_MESSAGE = 0
AWAITING_REPLY = 1

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# Flask –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –æ–±—Ö–æ–¥—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Ä—Ç—ñ–≤
app = Flask(__name__)

@app.route('/')
def health_check():
    return "Bot is alive and waiting for Telegram messages"

def run_flask():
    app.run(host='0.0.0.0', port=8000)

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞
print(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º: {TOKEN[:5]}...{TOKEN[-5:]}")
print(f"ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_ID}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞."""
    user = update.effective_user
    
    user_data[user.id] = {
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    }
    
    user_info = f"ID: {user.id}, –Ü–º'—è: {user.first_name}, –ü—Ä—ñ–∑–≤–∏—â–µ: {user.last_name or '–ù–µ–º–∞—î'}, –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '–ù–µ–º–∞—î'}"
    
    logger.info(f"–°–¢–ê–†–¢: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_info} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
    print(f"–°–¢–ê–†–¢: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_info} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
    
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –¶–µ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—åüëÄ.\n\n"
        "‚ñëüéâ–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —ñ —è –ø–µ—Ä–µ—à–ª—é –π–æ–≥–æ –ê–ù–û–ù–Ü–ú–ù–ûüéâ‚ñë."
    )
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞:\n{user_info}"
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def receive_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    user = update.effective_user
    message_text = update.message.text
    
    if user.id not in user_data:
        user_data[user.id] = {}
    
    user_data[user.id].update({
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'last_message': message_text
    })
    
    user_info = f"ID: {user.id}, –Ü–º'—è: {user.first_name}, –ü—Ä—ñ–∑–≤–∏—â–µ: {user.last_name or '–ù–µ–º–∞—î'}, –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username or '–ù–µ–º–∞—î'}"
    
    logger.info(f"–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø: –í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_info}\n–¢–µ–∫—Å—Ç: {message_text}")
    print(f"–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø: –í—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_info}\n–¢–µ–∫—Å—Ç: {message_text}")
    
    await update.message.reply_text(
        "‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ –±—É–¥–µ –∞–Ω–æ–Ω—ñ–º–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ‚ú®\n"
        "‚ö†Ô∏è –ù–∞ –∂–∞–ª—å, —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –í–∞–º –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞üò≠."
    )
    
   keyboard = [
    [InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ", callback_data=f"reply_{user.id}")]
]  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø–∏—Å–æ–∫
reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì¨ –ù–æ–≤–µ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n\n"
                 f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ (–∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ):\n{user_info}"
        )
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìù –¢–µ–∫—Å—Ç –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n{message_text}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("reply_"):
        user_id = int(data.split("_")[1])
        context.user_data["reply_to"] = user_id
        
        await query.edit_message_text(
            text=f"–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID: {user_id}\n\n"
                 f"–û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_data.get(user_id, {}).get('last_message', '–ù–µ–º–∞—î')}"
        )
        
        return AWAITING_REPLY
    
    return ConversationHandler.END

async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    
    reply_text = update.message.text
    reply_to_id = context.user_data.get("reply_to")
    
    if not reply_to_id:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏, –∫–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏.")
        return ConversationHandler.END
    
    try:
        await context.bot.send_message(
            chat_id=reply_to_id,
            text=f"üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}"
        )
        
        user_info = f"ID: {reply_to_id}"
        if reply_to_id in user_data:
            user = user_data[reply_to_id]
            user_info = f"ID: {reply_to_id}, –Ü–º'—è: {user.get('first_name', '–ù–µ–º–∞—î')}, –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.get('username', '–ù–µ–º–∞—î')}"
        
        await update.message.reply_text(
            f"‚úÖ –í–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:\n{user_info}"
        )
        
        logger.info(f"–í–Ü–î–ü–û–í–Ü–î–¨: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {reply_to_id}: {reply_text}")
        print(f"–í–Ü–î–ü–û–í–Ü–î–¨: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {reply_to_id}: {reply_text}")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {e}")
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É."""
    help_text = (
        "üìå –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ –≤–æ–Ω–æ –±—É–¥–µ –∞–Ω–æ–Ω—ñ–º–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    if update.effective_user.id == ADMIN_ID:
        help_text += (
            "\n\nüëë –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ'"
        )
    
    await update.message.reply_text(help_text)

def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±–æ—Ç–∞."""
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(TOKEN).build()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ ConversationHandler –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_callback)],
        states={
            AWAITING_REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_reply)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=True,
    )
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    while True:
        try:
            application.run_polling()
        except Exception as e:
            logger.error(f"–ë–æ—Ç –∑—É–ø–∏–Ω–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            print(f"–ë–æ—Ç –∑—É–ø–∏–Ω–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)

if __name__ == "__main__":
    main()

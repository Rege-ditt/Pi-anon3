import logging
import os
import threading
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes, ConversationHandler
from flask import Flask
–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
level=logging.DEBUG
)
logger = logging.getLogger(name)
–¢–æ–∫–µ–Ω —Ç–∞ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7903591351:AAH9zNPCwh4eTXMuMWQa1T0EwV5xgemwjds"
ADMIN_ID = 6085114476
–°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
AWAITING_REPLY = 1
–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}
Flask –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –æ–±—Ö–æ–¥—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Ä—Ç—ñ–≤
app = Flask(name)
@app.route('/')
def health_check():
return "Bot is alive and waiting for Telegram messages"
def run_flask():
app.run(host='0.0.0.0', port=8000)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
user = update.effective_user
user_data[user.id] = {
'username': user.username,
'first_name': user.first_name,
'last_name': user.last_name
}
await update.message.reply_text(
"–í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –ø–µ—Ä–µ—à–ª—é –π–æ–≥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æüëÄ!\n"
"üéâ –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —ñ —è –ø–µ—Ä–µ—à–ª—é –π–æ–≥–æ –ê–ù–û–ù–Ü–ú–ù–û üéâ"
)
async def receive_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
user = update.effective_user
message_text = update.message.text
user_data[user.id] = {
'last_message': message_text
}
keyboard = [[InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–æ", callback_data=f"reply_{user.id}")]]
reply_markup = InlineKeyboardMarkup(keyboard)

await context.bot.send_message(
    chat_id=ADMIN_ID,
    text=f"üì¨ –ù–æ–≤–µ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n\n{message_text}",
    reply_markup=reply_markup
)
await update.message.reply_text("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ –±—É–¥–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ‚ú®!")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
query = update.callback_query
await query.answer()
if query.data.startswith("reply_"):
user_id = int(query.data.split("_")[1])
context.user_data["reply_to"] = user_id
await query.edit_message_text(
text="–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
)
return AWAITING_REPLY
return ConversationHandler.END
async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
reply_text = update.message.text
reply_to_id = context.user_data.get("reply_to")
if not reply_to_id:
await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞.")
return ConversationHandler.END
await context.bot.send_message(
    chat_id=reply_to_id,
    text=f"üì® –í–∞–º –Ω–∞–¥—ñ–π—à–ª–∞ –∞–Ω–æ–Ω—ñ–º–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n\n{reply_text}"
)
await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞üçì!")
return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
return ConversationHandler.END
def main() -> None:
flask_thread = threading.Thread(target=run_flask)
flask_thread.daemon = True
flask_thread.start()
application = Application.builder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_callback)],
    states={
        AWAITING_REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, reply_to_user)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_message=True,
)

application.add_handler(CommandHandler("start", start))
application.add_handler(conv_handler)
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_message))

while True:
    try:
        application.run_polling()
    except Exception as e:
        logger.error(f"–ë–æ—Ç –∑—É–ø–∏–Ω–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)

if name == "main":
main()
